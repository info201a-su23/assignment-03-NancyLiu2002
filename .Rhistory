#    purposes. Your function will take no parameters.
#
#    To solve this problem, you might do a web search and/or find an introduction
#    to regular expressions and R. Take your time. You will likely need to do some
#    thoughtful trial and error. (Variable: `get_purposes`)
# 5d: Show that your function, `get_purposes()` works. (Variable: `high_level_purpose`)
# 5e: How many "high level" purposes have you identified? (Variable: `num_high_level`)
# 5f: Use the table() function to count the number of protests for each high level purpose. (Variable: `high_level_table`)
#                                         Note 15.
#     *CONSIDER:* Use View() to examine your `high_level_table` variable. What
#     picture does this paint of the U.S.?
#                                         Note 16.
## Part 6: Developing data systems ----
#
# "Count Love" and similar systems are developed by writing functions that each
# do one thing. The function, `get_purposes()`, which you wrote earlier, is an
# example.
#
# To work on this part of the assignment, you should carefully examine the
# column `Tags` in the `protests` dataframe.  Also, you will find this blog post
# useful: https://countlove.org/blog/new-protest-topics.html
#
# Below, you will see the implementation of two functions,
# which you should study:
#    format_doc()
#    write_report()
#
# In this part of A2, you will write two new functions:
#
# FUNCTION 1: filter_positions()
# filter_positions() takes two arguments:
#     purpose             A string for the purpose of the protest (e.g., "Environment")
#     position_taken      A string for the position taken (e.g., "Against noise")
#                         The default value should be NULL
#
# filter_positions() should return a dataframe of the protests that match on `purpose`
# and `position_taken`. If `position_taken` is NULL then all protests that
# match the `purpose` should be returned.
#
# FUNCTION #2: filter_and_report()
# filter_and_report() takes two arguments:
#     purpose             A string for the purpose of the protest (e.g., "Environment")
#     position_taken      A string for the position taken (e.g., "Against noise")
#                         The default value should be NULL
#
# This function should do two things:(1) It should call `filter_positions()`,
# to create a sub-set of protests, stored in a dataframe; and (2) It should
# call `format_doc()`, to create the report.
#
# CODING PROMPT
# (1) Write the two functions (1 and 2), just described
# (2) Write code to test the functions and show that they work
# (3) Document your code.
#                                         Note 17.
## Reporting ----
# This function produces a markdown report that summarizes a subset
# of the protests.
#
#    protest_df       A dataframe of the subset of protests to be summarized
#    category         A string for the protest category name (e.g., "Civil Rights")
#    position_taken   A string of the position taken (e.g., "For women's rights").
#                     If NULL, then the data has NOT been filtered by a position_taken
#
# The output takes this form:
#     # Category:  Environment
#     ## Position taken:  For renewable energy
#     _Summary_
#
#     * Number of Protests: 19
#     * Total Attendees: 686
#
#     _List of Protests (Attendees)_
#
#     * 2017-04-01: Indianapolis, IN [Article](http://www.tribstar.com/news/solar-proponents-rally-against-bill/article_7c7a7af8-b024-5ad8-a2de-75154083601c.html) (_160_)
#     * 2017-04-24: Cambridge, MA [Article](http://www.cambridgeday.com/2017/04/25/climate-rally-calls-for-all-renewable-energy-steps-against-anti-science-of-white-house/) (_NA_)
#     ...
#
# To view the report:
#    1. Call the function `write_report()` NOTE: Check the directory path
#    2. Open the file in markdown viewer
format_doc <- function(protest_df, purpose, position_taken=NULL) {
# Heading components
heading1 <- paste("# Protest purpose: ", purpose, "\n")
heading2 <- "\n"
if (!is.null(position_taken)) {
heading2 <- paste("## Position taken: ", position_taken, "\n")
}
# Summary component
num_protests <- format(nrow(protest_df), big.mark=",")
total_attendees <- format(sum(protest_df$Attendees, na.rm=TRUE), big.mark=",")
summary <- paste0("_Summary_\n\n",
"* Number of Protests: ", num_protests, "\n",
"* Total Attendees: ", total_attendees, "\n\n",
"_List of Protests (Attendees)_\n\n")
# List of protests component (Note: Bullet_list is a vector)
bullet_list <- paste0("* ", protest_df$Date, ": ", protest_df$Location,
" [Article](", protest_df$Source, ")", " (_", protest_df$Attendees, "_)\n")
# Collapse the vector into a string
url_str <- paste0(bullet_list, collapse="")
# Paste together each of the report components
md_doc <- paste0(heading1, heading2, summary, url_str)
return(md_doc)
}
min_attendees <- min(num_attendees, na.rm = TRUE)
min_attendees
max_attendees <- max(num_attendees, na.rm = TRUE)
max_attendees
mean_attendees <- mean(number_attendees, na.rm = TRUE)
mean_attendees <- mean(num_attendees, na.rm = TRUE)
mean_attendees
median_attendees <- median(num_attendees, na.rm = TRUE)
median_attendees
mean_median_diff <- mean_attendees-median_attendees
mean_median_diff
install.packages("shiny")
View(BGSall)
View(C.df)
View(C.O)
states <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-states-covid-2023.csv")
states <- read.csv("https://raw.githubusercontent.com/melaniewalsh/Neat-Datasets/main/us-states-covid-2023.csv")
states <- read.csv("https://raw.githubusercontent.com/melaniewalsh/Neat-Datasets/main/us-states-covid-2023.csv")
states <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-states-covid-2023.csv")
library(RCurl)
install.packages("readr")
library(readr)
# Read the CSV file using read_csv() from readr
states <- read_csv("https://raw.githubusercontent.com/melaniewalsh/Neat-Datasets/main/us-states-covid-2023.csv")
install.packages("readr")
library(readr)
# Read the CSV file using read_csv() from readr
states <- read_csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-national-covid-2023.csv")
num_protests <- nrow(protests)
num_protests
protests <- read.csv("https://countlove.org/data/data.csv")
# 1.b Load the *national level* data from the following URL into a variable
# called `national`
# https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-national-covid-2023.csv
national <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-national-covid-2023.csv")
# 1.b Load the *national level* data from the following URL into a variable
# called `national`
# https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-national-covid-2023.csv
national <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-national-covid-2023.csv")
total_us_cases <- national %>%
filter(cases == max(cases, na.rm = TRUE)) %>%
filter(date == max(date, na.rm = TRUE)) %>%
pull(cases)
library("tidyverse")
library("dplyr")
total_us_cases <- national %>%
filter(cases == max(cases, na.rm = TRUE)) %>%
filter(date == max(date, na.rm = TRUE)) %>%
pull(cases)
# Assuming you have the readr package installed (if not, install it with install.packages("readr"))
library(readr)
# Read the CSV data into the 'national' data frame
national <- read_csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-national-covid-2023.csv")
national <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-national-covid-2023.csv")
obs_national <- nrow(national)
national <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-national-covid-2023.csv")
national <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-national-covid-2023.csv")
obs_national <- nrow(national)
national <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-national-covid-2023.csv")
setwd("/Users/nancyliu/Documents")
national <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-national-covid-2023.csv")
setwd("/Users/nancyliu/Documents/INFO201")
national <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-national-covid-2023.csv")
getwd("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-national-covid-2023.csv")
install.packages("data.table")
library("data.table")
national <- fread("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-national-covid-2023.csv")
obs_national <- nrow(national)
national <- read.cvs("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-national-covid-2023.csv")
install.packages("dplyr")
library("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
national <- read.cvs("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-national-covid-2023.csv")
library("dplyr")
national <- read.cvs("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-national-covid-2023.csv")
national <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-national-covid-2023.csv")
num_attendees <- protests$Attendees
num_attendees
protests <- read.csv("https://countlove.org/data/data.csv")
View(protests)
national <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-national-covid-2023.csv")
national <- read.csv("https://raw.githubusercontent.com/melaniewalsh/Neat-Datasets/main/us-national-covid-2023.csv")
states <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-states-covid-2023.csv")
obs_states <- nrow(states)
national <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-national-covid-2023.csv")
View(s2)
national <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-national-covid-2023.csv")
national <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-national-covid-2023.csv")
national <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-national-covid-2023.csv")
obs_national <- nrow(national)
setwd("/Users/nancyliu/Documents/INFO201/assignment-03-NancyLiu2002")
national <- read.csv("national")
national <- read.csv("national.cvs")
national <- read.csv("/Users/nancyliu/Documents/INFO201/assignment-03-NancyLiu2002/national.csv")
View(national)
obs_national <- nrow(national)
obs_national
national <- read.csv("/Users/nancyliu/Documents/INFO201/assignment-03-NancyLiu2002/national.csv")
View(national)
new_deaths <- national %>%
arrange(date) %>%
mutate(new_deaths = deaths - lag(deaths, default = 0))
library("tidyverse")
library("dplyr")
national <- read.csv("/Users/nancyliu/Documents/INFO201/assignment-03-NancyLiu2002/national.csv")
View(national)
data_most_cases <- national %>%
filter(date == max(date, na.rm = TRUE))
pull(date)
data_most_cases <- national %>%
filter(new_cases == max(date, na.rm = TRUE))
data_most_cases <- national %>%
filter(new_cases == max(new_cases, na.rm = TRUE)) %>%
pull(date)
data_most_cases <- national %>%
filter(new_cases == max(cases, na.rm = TRUE)) %>%
pull(date)
data_most_cases <- national %>%
filter(new_cases == max(cases, na.rm = TRUE)) %>%
pull(date)
data_most_cases <- national %>%
filter(new_cases == max(new_cases, na.rm = TRUE)) %>%
pull(date)
data_most_cases
data_most_cases <- national %>%
filter(new_cases == max(new_cases, na.rm = TRUE)) %>%
pull(date)
data_most_cases <- national %>%
filter(new_cases == max(new_cases, na.rm = TRUE)) %>%
pull(date)
date_most_cases <- national %>%
filter(new_cases == max(new_cases)) %>%
pull(date)
new_cases <- national %>%
arrange(date) %>%
mutate(new_cases = cases - lag(cases, default = 0))
new_cases
date_most_cases <- national %>%
filter(new_cases == max(new_cases)) %>%
pull(date)
data_most_cases <- national %>%
filter(new_cases == max(new_cases, na.rm = TRUE)) %>%
pull(date)
data_most_cases <- national %>%
filter(new_cases == max(national$new_cases, na.rm = TRUE)) %>%
pull(date)
library(dplyr)
# Add the new column `new_cases` to the `national` data frame
national <- national %>%
arrange(date) %>%
mutate(new_cases = cases - lag(cases, default = 0))
# Find the maximum value of new_cases
max_new_cases <- max(national$new_cases, na.rm = TRUE)
# Find the date(s) with the most new cases
data_most_cases <- national %>%
filter(new_cases == max_new_cases) %>%
pull(date)
data_most_cases
data_most_cases <- national %>%
filter(new_cases == max(national$new_cases, na.rm = TRUE)) %>%
pull(date)
data_most_cases
data_most_cases <- national %>%
filter(new_cases == max(new_cases, na.rm = TRUE)) %>%
pull(date)
data_most_cases
data_most_cases <- national %>%
filter(new_cases == max(new_cases, na.rm = TRUE)) %>%
pull(date)
data_most_cases
data_most_cases <- national %>%
filter(new_cases == max(new_cases, na.rm = TRUE)) %>%
pull(date)
data_most_cases
data_most_cases <- national %>%
filter(new_cases == max(new_cases, na.rm = TRUE)) %>%
pull(date)
data_most_cases
data_most_cases <- national %>%
filter(new_cases == max(new_cases, na.rm = TRUE)) %>%
pull(date)
data_most_cases
date_most_cases <- national %>%
filter(new_cases == max(new_cases, na.rm = TRUE)) %>%
pull(date)
date_most_cases
date_most_deaths <- national %>%
filter(new_deaths == max(new_deaths, na.rm = TRUE)) %>%
pull(date)
new_deaths <- national %>%
arrange(date) %>%
mutate(new_deaths = deaths - lag(deaths, default = 0))
new_deaths
date_most_deaths <- national %>%
filter(new_deaths == max(new_deaths, na.rm = TRUE)) %>%
pull(date)
date_most_deaths <- national %>%
filter(new_deaths == max(new_deaths, na.rm = TRUE)) %>%
pull(date)
# Load the dplyr package
library(dplyr)
# Add the new column `new_deaths` to the `national` data frame
national <- national %>%
arrange(date) %>%
mutate(new_deaths = deaths - lag(deaths, default = 0))
# Find the date(s) when the most new deaths occurred
date_most_deaths <- national %>%
filter(new_deaths == max(new_deaths, na.rm = TRUE)) %>%
pull(date)
date_most_deaths
date_most_deaths <- national %>%
filter(new_deaths == max(new_deaths, na.rm = TRUE)) %>%
pull(date)
date_most_deaths
most_deaths <- national %>%
filter(new_deaths == max(new_deaths, na.rm = TRUE)) %>%
pull(new_deaths)
most_deaths
plot(national$new_cases)
plot(national$new_deaths)
new_deaths <- national %>%
arrange(date) %>%
mutate(new_deaths = deaths - lag(deaths, default = 0))
new_deaths
highest_cases_in_each_state <- counties %>%
group_by(state) %>%
filter(cases == max(cases, na.rm = TRUE)) %>%
upgroup()
highest_cases_in_each_state <- counties %>%
group_by(state) %>%
filter(cases == max(cases, na.rm = TRUE)) %>%
ungroup()
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>%
group_by(state) %>%
filter(cases == max(cases, na.rm = TRUE)) %>%
upgroup()
highest_cases_in_each_state <- counties %>%
group_by(state) %>%
filter(cases == max(cases, na.rm = TRUE)) %>%
ungroup()
counties <- read.csv("/Users/nancyliu/Documents/INFO201/assignment-03-NancyLiu2002/counties.csv")
View(counties)
highest_cases_in_each_state <- counties %>%
group_by(state) %>%
filter(cases == max(cases, na.rm = TRUE)) %>%
ungroup()
highest_cases_in_each_state <- counties %>%
group_by(state) %>%
filter(cases == max(cases, na.rm = TRUE)) %>%
ungroup()
highest_cases_in_each_state
lowest_deaths_in_each_state <- counties %>%
group_by(state) %>%
filter(cases == min(cases, na.rm = TRUE)) %>%
ungroup()
owest_deaths_in_each_state
lowest_deaths_in_each_state <- counties %>%
group_by(state) %>%
filter(cases == min(cases, na.rm = TRUE)) %>%
ungroup()
lowest_deaths_in_each_state
lowest_deaths_in_each_state <- counties %>%
group_by(state) %>%
filter(cases == min(deaths, na.rm = TRUE)) %>%
ungroup()
lowest_deaths_in_each_state
lowest_deaths_in_each_state <- counties %>%
group_by(state) %>%
filter(deaths == min(deaths, na.rm = TRUE)) %>%
ungroup()
lowest_deaths_in_each_state
total_cases_counties <- counties %>%
group_by(date) %>%
summarize(county_total_cases = sum(cases))
total_cases_counties
all_totals <- left_join(national, total_cases_counties, by = "date")
all_totals
all_totals <- right_join(national, total_cases_counties, by = "date")
all_totals
all_totals <- left_join(national, total_cases_counties, by = "date")
all_totals
all_totals <- right_join(national, total_cases_counties, by = "date")
all_totals
all_totals <- right_join(national, total_cases_counties, by = "date")
all_totals
all_totals <- right_join(national, total_cases_counties, by = "date")
all_totals
all_totals <- left_join(national, total_cases_counties, by = "date")
all_totals
all_totals <- left_join(national, total_cases_counties, by = "date")
all_totals
national_county_diff <- all_totals %>%
filter(county_total_cases != cases)
national_county_diff
num_national_county_diff <- nrow(national_county_diff)
num_national_county_diff
my_answer <- national %>%
filter(date == max(date, na.rm = TRUE) - 7)
my_answer <- national %>%
filter(date == max(date, na.rm = TRUE) - 7) %>%
pull(cases)
my_answer <- national %>%
filter(date == median(date, na.rm = TRUE)) %>%
pull(cases)
my_answer
my_answer <- national %>%
filter(date == max(date, na.rm = TRUE)) %>%
pull(cases)
summarize(median = median(cases))
my_answer <- national %>%
filter(date == max(date, na.rm = TRUE)) %>%
summarize(median = median(cases))
my_answer
my_answer1 <- national %>%
filter(date == max(date)) %>%
summarize(average_new_cases_per_day = mean(new_cases))
my_answer1
obs_national <- nrow(national)
obs_national
obs_states <- nrow(states)
states <- read.csv("/Users/nancyliu/Documents/INFO201/assignment-03-NancyLiu2002/states.csv")
View(states)
obs_states <- nrow(states)
obs_states
total_us_cases <- national %>%
filter(date == max(date, na.rm = TRUE)) %>%
pull(cases)
library("dplyr")
total_us_cases <- national %>%
filter(date == max(date, na.rm = TRUE)) %>%
pull(cases)
total_us_cases
total_us_death <- national %>%
filter(date == max(date, na.rm = TRUE)) %>%
pull(deaths)
total_us_death
state_highest_cases <- states %>%
filter(cases == max(cases, na.rm = TRUE)) %>%
pull(state)
state_highest_case
national <- read.csv("/Users/nancyliu/Documents/INFO201/assignment-03-NancyLiu2002/national.csv")
View(national)
# 1.c Load the *state level* data from the following URL into a variable called
# `states`
# https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-states-covid-2023.csv
states <- read.csv("/Users/nancyliu/Documents/INFO201/assignment-03-NancyLiu2002/states.csv")
View(states)
# 1.d Load the *county level* data from the following URL into a variable called
# `counties`
# NOTE: This is a large dataset. It may take 30-60 seconds to load.
# https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-counties-covid-2023.csv
counties <- read.csv("/Users/nancyliu/Documents/INFO201/assignment-03-NancyLiu2002/counties.csv")
View(counties)
state_highest_cases <- states %>%
filter(cases == max(cases, na.rm = TRUE)) %>%
pull(state)
state_highest_cases
state_lowest_cases <- states %>%
filter(date == max(date, na.rm = TRUE)) %>%
filter(cases == min(cases, na.rm = TRUE)) %>%
pull(state)
state_lowest_cases
county_highest_cases <- counties %>%
filter(cases == max(cases, na.rm = TRUE)) %>%
pull(county)
county_highest_cases
highest_cases_in_each_state <- counties %>%
group_by(state) %>%
filter(cases == max(cases, na.rm = TRUE)) %>%
ungroup()
highest_cases_in_each_state
highest_cases_in_each_state <- counties %>%
group_by(Washington) %>%
filter(cases == max(cases, na.rm = TRUE)) %>%
ungroup()
highest_cases_in_each_state <- counties %>%
group_by(state) %>%
filter(cases == max(cases, na.rm = TRUE)) %>%
ungroup()
highest_cases_in_each_state
library(dplyr)
# Filter the counties data frame to include only the rows for Washington state
washington_counties <- counties %>%
filter(state == "Washington")
# Arrange the data frame in descending order based on the number of cases
washington_counties_sorted <- washington_counties %>%
arrange(desc(cases))
# Get the county with the highest number of cases in Washington state
highest_cases_county <- washington_counties_sorted %>%
slice(1)
# Print the county with the highest number of cases in Washington state
print(highest_cases_county)
lowest_deaths_in_each_state <- counties %>%
group_by(state) %>%
filter(deaths == min(deaths, na.rm = TRUE)) %>%
ungroup()
lowest_deaths_in_each_state
total_cases_counties <- counties %>%
group_by(date) %>%
summarize(county_total_cases = sum(cases))
total_cases_counties
my_answer <- national %>%
filter(date == max(date, na.rm = TRUE)) %>%
summarize(median = median(cases))
my_answer
